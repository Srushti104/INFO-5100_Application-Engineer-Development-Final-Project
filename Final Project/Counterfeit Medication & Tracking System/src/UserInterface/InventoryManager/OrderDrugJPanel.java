/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InventoryManager;

import Business.DistributorEnterprise;
import Business.Drug;
import Business.Enterprise;
import Business.HospitalEnterprise;
import Business.InventoryItem;
import Business.ManufacturerEnterprise;
import Business.Network;
import Business.Package1;
import Business.SalesManagementOrganization;
import Business.WorkRequests.SalesManagerWorkRequest;
import Business.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bobba
 */
public class OrderDrugJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Network network;
    UserAccount userAccount;

    /**
     * Creates new form OrderDrugJPanel
     */
    public OrderDrugJPanel(JPanel userProcessContainer, Network network, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.userAccount = userAccount;

        distributorComboBox.removeAllItems();

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise.getClass().equals(DistributorEnterprise.class)) {
                distributorComboBox.addItem(enterprise);

            }
        }
        Refresh();

    }

    private void Refresh() {
        int rowcount = inventoryTable.getRowCount();

        for (int i = rowcount - 1; i >= 0; i--) {
            ((DefaultTableModel) inventoryTable.getModel()).removeRow(i);

        }

        DistributorEnterprise distributorEnterprise = (DistributorEnterprise) distributorComboBox.getSelectedItem();

        if (distributorEnterprise == null) {
            return;
        }
        Drug tempDrug = null;
        Set<String> drugNameSet = new HashSet<>();
        for (InventoryItem inventoryItem : distributorEnterprise.getInventoryCatalog().getInventoryList()) { //for(InventoryItem inventoryItem:storeInventory.getInventoryList())
            Object row[] = new Object[3];

//            if (inventoryItem.getPackage1().getDrug() == tempDrug) {
//                break;
//            } else {
            if (drugNameSet.add(inventoryItem.getPackage1().getDrug().getDrugName())) {
                row[0] = inventoryItem.getPackage1();
                row[1] = inventoryItem.getPackage1().getDrug().getActualPrice();
                row[2] = distributorEnterprise.getInventoryCatalog().getTotalQuantity(inventoryItem.getPackage1().getDrug());
                

            //    tempDrug = inventoryItem.getPackage1().getDrug();

                ((DefaultTableModel) inventoryTable.getModel()).addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addQuantityButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        distributorComboBox = new javax.swing.JComboBox();
        quantitySpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(238, 238, 238));
        setMaximumSize(new java.awt.Dimension(1280, 700));
        setMinimumSize(new java.awt.Dimension(1280, 700));
        setPreferredSize(new java.awt.Dimension(1280, 700));

        addQuantityButton.setBackground(new java.awt.Color(57, 62, 70));
        addQuantityButton.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        addQuantityButton.setForeground(new java.awt.Color(238, 238, 238));
        addQuantityButton.setText("SUBMIT ORDER");
        addQuantityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuantityButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(34, 40, 49));
        jLabel2.setText("BROWSE INVENTORY");

        backButton.setBackground(new java.awt.Color(238, 238, 238));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/back.png"))); // NOI18N
        backButton.setBorder(null);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        distributorComboBox.setBackground(new java.awt.Color(238, 238, 238));
        distributorComboBox.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        distributorComboBox.setForeground(new java.awt.Color(34, 40, 49));
        distributorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        distributorComboBox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 173, 181), 1, true));
        distributorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributorComboBoxActionPerformed(evt);
            }
        });

        quantitySpinner.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N

        inventoryTable.setBackground(new java.awt.Color(238, 238, 238));
        inventoryTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 173, 181), 1, true));
        inventoryTable.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        inventoryTable.setForeground(new java.awt.Color(34, 40, 49));
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug Name", "Actual Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.setGridColor(new java.awt.Color(34, 40, 49));
        inventoryTable.setMaximumSize(new java.awt.Dimension(680, 122));
        inventoryTable.setMinimumSize(new java.awt.Dimension(680, 122));
        inventoryTable.setPreferredSize(new java.awt.Dimension(680, 122));
        inventoryTable.setRowHeight(20);
        inventoryTable.setSelectionBackground(new java.awt.Color(0, 173, 181));
        inventoryTable.setSelectionForeground(new java.awt.Color(238, 238, 238));
        jScrollPane1.setViewportView(inventoryTable);

        jLabel3.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(34, 40, 49));
        jLabel3.setText("SELECT QUANTITY");

        jLabel1.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(34, 40, 49));
        jLabel1.setText("ORDER DRUG");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 173, 181)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(distributorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addQuantityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(585, 585, 585)
                        .addComponent(jLabel1)))
                .addContainerGap(300, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distributorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addQuantityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(285, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addQuantityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuantityButtonActionPerformed
        // TODO add your handling code here:
        int quantity = (Integer) (quantitySpinner.getValue());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Please select valid quantity");

            return;
        }

        int selectedRow = inventoryTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request");

            return;

        }
        DistributorEnterprise distributorEnterprise = (DistributorEnterprise) distributorComboBox.getSelectedItem();

        for (Drug drug : distributorEnterprise.getDrugCatalog().getDrugList()) {
            /* if(quantity>inventoryItem.getQuantity())
            {
                JOptionPane.showMessageDialog(null, "The selected quantity of products are not available", "Quantity", JOptionPane.ERROR_MESSAGE);
            return;
            }*/
        }

        Package1 drug = (Package1) inventoryTable.getValueAt(selectedRow, 0);

        Enterprise e = network.getEnterpriseDirectory().getMyEnterprise(userAccount);
        if (e.getClass().equals(HospitalEnterprise.class)) {

            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) e;
            SalesManagerWorkRequest salesManagerWorkRequest = new SalesManagerWorkRequest();
            salesManagerWorkRequest.setSender(userAccount);
            salesManagerWorkRequest.setRequestDate(new Date());
            salesManagerWorkRequest.setMessage("Request for Drugs");
            salesManagerWorkRequest.setStatus("Request for Drug Sent");
            //productManagerWorkRequest.setManuName(manufacturerComboBox.getSelectedItem());
            salesManagerWorkRequest.setQuant(quantity);
            //licenseManagerWorkRequest.setDrugManu(drugaManuTextArea.getText());
            salesManagerWorkRequest.setResult("Order request sent");
            salesManagerWorkRequest.setDrName(drug.getDrug().getDrugName());
            salesManagerWorkRequest.setDrug(drug.getDrug());
            //salesManagerWorkRequest.setManuName(manuName);

            HospitalEnterprise e2 = (HospitalEnterprise) network.getEnterpriseDirectory().getMyEnterprise(userAccount);

            DistributorEnterprise e1 = null;
            for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise1.getClass().equals(DistributorEnterprise.class)) {
                    e1 = (DistributorEnterprise) enterprise1;
                }
            }

            SalesManagementOrganization salesManagementOrganization = e1.getSalesManagementOrganization();
            salesManagementOrganization.getWorkQueue().getWorkRequestList().add(salesManagerWorkRequest);

            // userAccount.getWorkQueue().getWorkRequestList().add(salesRequest);
            e2.getInventoryManagementOrganization().getSentWorkQueue().getWorkRequestList().add(salesManagerWorkRequest);

            JOptionPane.showMessageDialog(null, "Work Request Sent");

        }

        Refresh();
    }//GEN-LAST:event_addQuantityButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);

        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void distributorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributorComboBoxActionPerformed
        // TODO add your handling code here:

        Refresh();
    }//GEN-LAST:event_distributorComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addQuantityButton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox distributorComboBox;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables
}
