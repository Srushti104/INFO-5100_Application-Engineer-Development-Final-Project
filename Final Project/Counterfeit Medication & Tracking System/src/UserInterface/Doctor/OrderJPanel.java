/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Doctor;

import Business.Business;
import Business.Drug;
import Business.Enterprise;
import Business.HospitalEnterprise;
import Business.InventoryItem;
import Business.InventoryManagementOrganization;
import Business.WorkRequests.InventoryManagerWorkRequest;
import Business.Network;
import Business.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author srush
 */
public class OrderJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Business business;
    UserAccount userAccount;

    /**
     * Creates new form OrderJPanel
     */
    public OrderJPanel(JPanel userProcessContainer, Business business, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.userAccount = userAccount;

        distributorComboBox.removeAllItems();
        for (Network network : business.getNetworkDirectory().getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getClass().equals(HospitalEnterprise.class)) {
                    distributorComboBox.addItem(enterprise);

                }
            }
        }

        refresh();
    }

    public void refresh() {
        int rowcount = inventoryTable.getRowCount();

        for (int i = rowcount - 1; i >= 0; i--) {
            ((DefaultTableModel) inventoryTable.getModel()).removeRow(i);

        }

        HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) distributorComboBox.getSelectedItem();

        if (hospitalEnterprise == null) {
            return;
        }

        Drug tempDrug = null;
        for (InventoryItem inventoryItem : hospitalEnterprise.getInventoryCatalog().getInventoryList()) //  for(InventoryItem inventoryItem:storeInventory.getInventoryList())
        {
            Object row[] = new Object[3];

            if (inventoryItem.getPackage1().getDrug() == tempDrug) {
                break;
            } else {

                row[0] = inventoryItem.getPackage1().getDrug();
                row[1] = inventoryItem.getPackage1().getDrug().getActualPrice();
                row[2]=hospitalEnterprise.getInventoryCatalog().getTotalQuantity(inventoryItem.getPackage1().getDrug());

                tempDrug = inventoryItem.getPackage1().getDrug();

            }

            ((DefaultTableModel) inventoryTable.getModel()).addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addQuantityButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        distributorComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();

        addQuantityButton.setText("Add Quantity");
        addQuantityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuantityButtonActionPerformed(evt);
            }
        });

        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Browse Inventory:");

        distributorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        distributorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributorComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Order Drug");

        jLabel3.setText("Quantity:");

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug Name", "Actual Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inventoryTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(185, 185, 185)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(234, 234, 234))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(93, 93, 93)
                                        .addComponent(distributorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(230, 230, 230)
                                .addComponent(jLabel1)))
                        .addGap(210, 210, 210))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addQuantityButton)
                        .addGap(252, 252, 252))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(distributorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addQuantityButton)
                .addGap(136, 136, 136))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addQuantityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuantityButtonActionPerformed
        // TODO add your handling code here:
        int quantity = (Integer) (quantitySpinner.getValue());
        if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Please select valid quantity");
            return;
        }

        int selectedRow = inventoryTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a work request");
            return;

        }
        HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) distributorComboBox.getSelectedItem();

        for (InventoryItem inventoryItem : hospitalEnterprise.getInventoryCatalog().getInventoryList()) {
            /* if(quantity>inventoryItem.getQuantity())
            {
                JOptionPane.showMessageDialog(null, "The selected quantity of products are not available", "Quantity", JOptionPane.ERROR_MESSAGE);
                return;
            }*/
        }

        Drug drug = (Drug) inventoryTable.getValueAt(selectedRow, 0);

        for (Network network : business.getNetworkDirectory().getNetworkList()) {
            Enterprise e = network.getEnterpriseDirectory().getMyEnterprise(userAccount);
            if (e.getClass().equals(HospitalEnterprise.class)) {

                InventoryManagerWorkRequest inventoryManagerWorkRequest = new InventoryManagerWorkRequest();
                inventoryManagerWorkRequest.setSender(userAccount);
                inventoryManagerWorkRequest.setRequestDate(new Date());
                inventoryManagerWorkRequest.setMessage("Request for Drugs");
                inventoryManagerWorkRequest.setStatus("Request for Drug Sent");
                //productManagerWorkRequest.setManuName(manufacturerComboBox.getSelectedItem());
                inventoryManagerWorkRequest.setQt(quantity);
                //licenseManagerWorkRequest.setDrugManu(drugaManuTextArea.getText());
                inventoryManagerWorkRequest.setResult("Order request sent");
                inventoryManagerWorkRequest.setDrug(drug);
                inventoryManagerWorkRequest.setDrug(drug);
                //salesManagerWorkRequest.setManuName(manuName);

                // HospitalEnterprise e2=(HospitalEnterprise)network.getEnterpriseDirectory().getMyEnterprise(userAccount);
                HospitalEnterprise eh = null;
                for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise1.getClass().equals(HospitalEnterprise.class)) {
                        eh = (HospitalEnterprise) enterprise1;
                    }
                }

                InventoryManagementOrganization inventoryManagementOrganization = eh.getInventoryManagementOrganization();
                inventoryManagementOrganization.getWorkQueue().getWorkRequestList().add(inventoryManagerWorkRequest);

                // userAccount.getWorkQueue().getWorkRequestList().add(salesRequest);
                JOptionPane.showMessageDialog(null, "Work Request Sent");
            }
        }

        refresh();
    }//GEN-LAST:event_addQuantityButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);

        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void distributorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributorComboBoxActionPerformed
        // TODO add your handling code here:

        refresh();
    }//GEN-LAST:event_distributorComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addQuantityButton;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox distributorComboBox;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables
}
