/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LicenseInspectorRole;

import Business.DistributorEnterprise;
import Business.Enterprise;
import Business.FDAEnterprise;
import Business.InventoryManagementOrganization;
import Business.WorkRequests.LicenseManagerWorkRequest;
import Business.ManagementOrganization;
import Business.WorkRequests.ManagerWorkRequest;
import Business.ManufacturerEnterprise;
import Business.Network;
import Business.Organization;
import Business.ProductManagementOrganization;
import Business.WorkRequests.ProductManagerWorkRequest;
import Business.StateRegulatoryEnterprise;
import Business.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author nived
 */
public class ApproveLicenseRequestsJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    LicenseManagerWorkRequest licenseManagerWorkRequest;
    UserAccount userAccount;
    Network network;

    /**
     * Creates new form ApproveLicenseRequestsJPanel
     */
    public ApproveLicenseRequestsJPanel(JPanel userProcessContainer,LicenseManagerWorkRequest licenseManagerWorkRequest,UserAccount userAccount,Network network) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.licenseManagerWorkRequest=licenseManagerWorkRequest;
        this.userAccount=userAccount;
        this.network=network;
        resultComboBox.removeAllItems();
        resultComboBox.addItem("Approved");
        resultComboBox.addItem("Rejected");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dooneButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        licenseNumberField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        resultComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));

        dooneButton.setText("Done");
        dooneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dooneButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Result:");

        jLabel3.setText("License Number:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Approval of Licenses");

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/backButton.jpg"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        resultComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        resultComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(194, 194, 194)
                                .addComponent(dooneButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(licenseNumberField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(resultComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 124, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(resultComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(licenseNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(dooneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dooneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dooneButtonActionPerformed
        // TODO add your handling code here:

        try {
                  String result=(String)resultComboBox.getSelectedItem();
            // labTechnicianWorkRequest.setResult(requestField.getText());
            licenseManagerWorkRequest.setStatus("License Approved");
            licenseManagerWorkRequest.setResult(result);
            UserAccount sender1 = licenseManagerWorkRequest.getSender();
            
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
            {
                for(Organization organization:enterprise.getOrganizationDirectory().getOrgList())
                {
                    for(UserAccount userAccount1:organization.getUserAccountDirectory().getUserAccountList())
                        
                    {
                        if(userAccount1==sender1)
                        {
                    if(enterprise.getClass().equals(ManufacturerEnterprise.class))
                    {
                
            ManufacturerEnterprise manufacturerEnterprise=(ManufacturerEnterprise)enterprise;
            ProductManagerWorkRequest productManagerWorkRequest=new ProductManagerWorkRequest();
            productManagerWorkRequest.setSender(userAccount);
            productManagerWorkRequest.setRequestDate(new Date());
            productManagerWorkRequest.setStatus("License Approved");
            productManagerWorkRequest.setResult(result);
            productManagerWorkRequest.setLicenseNumber(Integer.parseInt(licenseNumberField.getText()));
            manufacturerEnterprise.setLicenseNumber(Integer.parseInt(licenseNumberField.getText()));
            productManagerWorkRequest.setMessage(result);
            productManagerWorkRequest.setLicenseManagerWorkRequest(licenseManagerWorkRequest);
            productManagerWorkRequest.getLicenseManagerWorkRequest().setStatus("License Approved");
            productManagerWorkRequest.setDrName(licenseManagerWorkRequest.getDrugManu());
            productManagerWorkRequest.setManuName(licenseManagerWorkRequest.getManuName());
            manufacturerEnterprise.setDrugN(licenseManagerWorkRequest.getDrugManu());
            manufacturerEnterprise.setManuN(licenseManagerWorkRequest.getManuName());

            FDAEnterprise e=(FDAEnterprise)network.getEnterpriseDirectory().getMyEnterprise(userAccount);
            licenseNumberField.setEditable(false);
            dooneButton.setEnabled(false);

            //userAccount.getWorkQueue().getWorkRequestList().add(shipWorkRequest);

            JOptionPane.showMessageDialog(null, "License Information sent");
            JOptionPane.showMessageDialog(null, "Processed succesfully");

            ManufacturerEnterprise d1 = null;
            for(Enterprise enterprise1:network.getEnterpriseDirectory().getEnterpriseList())
            {
                if(enterprise1.getClass().equals(ManufacturerEnterprise.class))

                {
                    d1=(ManufacturerEnterprise)enterprise1;
                }
            }

            ProductManagementOrganization productManagementOrganization=d1.getProductManagementOrganization();
            productManagementOrganization.getWorkQueue().getWorkRequestList().add(productManagerWorkRequest);
            //SalesManagementOrganization salesOrganization=e1.getSalesManagementOrganization();
            //  salesOrganization.getWorkQueue().getWorkRequestList().add(salesRequest);

            // userAccount.getWorkQueue().getWorkRequestList().add(salesRequest);
            e.getLicensingOrganization().getSentWorkQueue().getWorkRequestList().add(productManagerWorkRequest);

        }
                        }
                    }
                }
            }
        }
            

        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Process Reqquest failed");
        }
    
        try {
              String result1=(String)resultComboBox.getSelectedItem();
            // labTechnicianWorkRequest.setResult(requestField.getText());
            licenseManagerWorkRequest.setStatus("License Approved");
            licenseManagerWorkRequest.setResult(result1);
            UserAccount sender1 = licenseManagerWorkRequest.getSender();
            
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
            {
                for(Organization organization:enterprise.getOrganizationDirectory().getOrgList())
                {
                    for(UserAccount userAccount1:organization.getUserAccountDirectory().getUserAccountList())
                        
                    {
                        if(userAccount1==sender1)
                        {
                    if(enterprise.getClass().equals(DistributorEnterprise.class))
                    {
                      
            DistributorEnterprise distributorEnterprise=(DistributorEnterprise)enterprise;
            ManagerWorkRequest managerWokrRequest=new ManagerWorkRequest();
            managerWokrRequest.setSender(userAccount);
            managerWokrRequest.setRequestDate(new Date());
            managerWokrRequest.setStatus("License Approved");
            managerWokrRequest.setResult(result1);
            managerWokrRequest.setLicenseNumber(Integer.parseInt(licenseNumberField.getText()));
            managerWokrRequest.setMessage(result1);
            managerWokrRequest.setLicenseManagerWorkRequest(licenseManagerWorkRequest);
            managerWokrRequest.getLicenseManagerWorkRequest().setStatus("License Approved");
            distributorEnterprise.setLicenseNumber(Integer.parseInt(licenseNumberField.getText()));
            

            StateRegulatoryEnterprise e=(StateRegulatoryEnterprise)network.getEnterpriseDirectory().getMyEnterprise(userAccount);

            //userAccount.getWorkQueue().getWorkRequestList().add(shipWorkRequest);

            JOptionPane.showMessageDialog(null, "Work Request");
            JOptionPane.showMessageDialog(null, "Processed succesfully");

            licenseNumberField.setEditable(false);
            dooneButton.setEnabled(false);
            
            DistributorEnterprise d1 = null;
            for(Enterprise enterprise1:network.getEnterpriseDirectory().getEnterpriseList())
            {
                if(enterprise1.getClass().equals(DistributorEnterprise.class))

                {
                    d1=(DistributorEnterprise)enterprise1;
                }
            }

            ManagementOrganization managementOrganization=d1.getManagementOrganization();
            managementOrganization.getWorkQueue().getWorkRequestList().add(managerWokrRequest);
            //SalesManagementOrganization salesOrganization=e1.getSalesManagementOrganization();
            //  salesOrganization.getWorkQueue().getWorkRequestList().add(salesRequest);

            // userAccount.getWorkQueue().getWorkRequestList().add(salesRequest);
            e.getLicensingOrganization().getSentWorkQueue().getWorkRequestList().add(managerWokrRequest);

        }
                        }
                    }
                }
            }
        }
            

        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Process Reqquest failed");
        }
    }//GEN-LAST:event_dooneButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout cardLayout=(CardLayout)userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void resultComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultComboBoxActionPerformed
        // TODO add your handling code here:
        
        if(resultComboBox.getSelectedItem()=="Rejected")
        {
            licenseNumberField.setEditable(false);
        }
    }//GEN-LAST:event_resultComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton dooneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField licenseNumberField;
    private javax.swing.JComboBox resultComboBox;
    // End of variables declaration//GEN-END:variables
}
